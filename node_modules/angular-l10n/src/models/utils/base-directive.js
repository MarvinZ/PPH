import { Input } from '@angular/core';
import { BFS } from './bfs';
/**
 * @abstract
 */
export var BaseDirective = (function () {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    function BaseDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.MUTATION_CONFIG = { subtree: true, characterData: true };
    }
    Object.defineProperty(BaseDirective.prototype, "value", {
        /**
         * @param {?} valueAttribute
         * @return {?}
         */
        set: function (valueAttribute) {
            this.valueAttribute = valueAttribute;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseDirective.prototype.ngAfterViewInit = function () {
        this.element = this.el.nativeElement;
        // Target node is a text type node.
        this.renderNode = BFS.getTargetNode(this.element);
        this.getKey();
        if (!!this.key) {
            this.setup();
        }
    };
    ;
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseDirective.prototype.ngOnChanges = function (changes) {
        if (!!this.key) {
            if (!!this.valueAttribute) {
                this.key = this.valueAttribute;
            }
            this.replace();
        }
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.ngOnDestroy = function () {
        this.removeTextListener();
    };
    /**
     * @abstract
     * @return {?}
     */
    BaseDirective.prototype.setup = function () { };
    /**
     * @abstract
     * @return {?}
     */
    BaseDirective.prototype.replace = function () { };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseDirective.prototype.setText = function (value) {
        if (!!this.nodeValue) {
            this.removeTextListener();
            this.renderer.setText(this.renderNode, this.nodeValue.replace(this.key, value));
            this.addTextListener();
        }
        else if (!!this.valueAttribute) {
            this.renderer.setElementAttribute(this.element, "value", value);
        }
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.addTextListener = function () {
        var _this = this;
        this.textObserver = new MutationObserver(function (mutations) {
            _this.getKey();
            if (!!_this.key) {
                _this.replace();
            }
        });
        this.textObserver.observe(this.renderNode, this.MUTATION_CONFIG);
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.removeTextListener = function () {
        if (typeof this.textObserver != "undefined") {
            this.textObserver.disconnect();
        }
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.getText = function () {
        this.nodeValue = this.renderNode != null ? (this.renderNode.nodeValue) : null;
        return this.nodeValue != null ? this.nodeValue.trim() : null;
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.getKey = function () {
        if (this.element.childNodes.length > 0) {
            this.key = this.getText();
        }
        else if (!!this.valueAttribute) {
            this.key = this.valueAttribute;
        }
    };
    BaseDirective.propDecorators = {
        'value': [{ type: Input },],
    };
    return BaseDirective;
}());
function BaseDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseDirective.propDecorators;
    /** @type {?} */
    BaseDirective.prototype.key;
    /** @type {?} */
    BaseDirective.prototype.element;
    /** @type {?} */
    BaseDirective.prototype.renderNode;
    /** @type {?} */
    BaseDirective.prototype.nodeValue;
    /** @type {?} */
    BaseDirective.prototype.textObserver;
    /** @type {?} */
    BaseDirective.prototype.valueAttribute;
    /** @type {?} */
    BaseDirective.prototype.MUTATION_CONFIG;
    /** @type {?} */
    BaseDirective.prototype.el;
    /** @type {?} */
    BaseDirective.prototype.renderer;
}
//# sourceMappingURL=base-directive.js.map