{"version":3,"file":"base-directive.js","sourceRoot":"","sources":["../../../../src/models/utils/base-directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    ElementRef,\r\n    Input,\r\n    Renderer,\r\n    AfterViewInit,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { BFS } from './bfs';\n/**\n * @abstract\n */\nexport abstract class BaseDirective implements AfterViewInit, OnChanges, OnDestroy {\n/**\n * @param {?} valueAttribute\n * @return {?}\n */\nset value(valueAttribute: string) {\r\n        this.valueAttribute = valueAttribute;\r\n    }\r\n\r\n    protected key: string;\nprivate element: any;\nprivate renderNode: any;\nprivate nodeValue: string;\nprivate textObserver: MutationObserver;\nprivate valueAttribute: string;\nprivate readonly MUTATION_CONFIG: any = { subtree: true, characterData: true };\n/**\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(protected el: ElementRef, protected renderer: Renderer) { }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\r\n        this.element = this.el.nativeElement;\r\n\r\n        // Target node is a text type node.\r\n        this.renderNode = BFS.getTargetNode(this.element);\r\n\r\n        this.getKey();\r\n        if (!!this.key) {\r\n            this.setup();\r\n        }\r\n    };\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\r\n        if (!!this.key) {\r\n            if (!!this.valueAttribute) {\r\n                this.key = this.valueAttribute;\r\n            }\r\n            this.replace();\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\r\n        this.removeTextListener();\r\n    }\n/**\n * @abstract\n * @return {?}\n */\nsetup() {}\n/**\n * @abstract\n * @return {?}\n */\nreplace() {}\n/**\n * @param {?} value\n * @return {?}\n */\nprotected setText(value: string): void {\r\n        if (!!this.nodeValue) {\r\n            this.removeTextListener();\r\n            this.renderer.setText(this.renderNode, this.nodeValue.replace(this.key, value));\r\n            this.addTextListener();\r\n        } else if (!!this.valueAttribute) {\r\n            this.renderer.setElementAttribute(this.element, \"value\", value);\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate addTextListener(): void {\r\n        this.textObserver = new MutationObserver((mutations: any) => {\r\n            this.getKey();\r\n            if (!!this.key) {\r\n                this.replace();\r\n            }\r\n        });\r\n        this.textObserver.observe(this.renderNode, this.MUTATION_CONFIG);\r\n    }\n/**\n * @return {?}\n */\nprivate removeTextListener(): void {\r\n        if (typeof this.textObserver != \"undefined\") {\r\n            this.textObserver.disconnect();\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate getText(): string {\r\n        this.nodeValue = this.renderNode != null ? /** @type {?} */(( <string>this.renderNode.nodeValue)) : null;\r\n        return this.nodeValue != null ? this.nodeValue.trim() : null;\r\n    }\n/**\n * @return {?}\n */\nprivate getKey(): void {\r\n        if (this.element.childNodes.length > 0) {\r\n            this.key = this.getText();\r\n        } else if (!!this.valueAttribute) {\r\n            this.key = this.valueAttribute;\r\n        }\r\n    }\r\n\r\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n};\n}\n\nfunction BaseDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseDirective.propDecorators;\n/** @type {?} */\nBaseDirective.prototype.key;\n/** @type {?} */\nBaseDirective.prototype.element;\n/** @type {?} */\nBaseDirective.prototype.renderNode;\n/** @type {?} */\nBaseDirective.prototype.nodeValue;\n/** @type {?} */\nBaseDirective.prototype.textObserver;\n/** @type {?} */\nBaseDirective.prototype.valueAttribute;\n/** @type {?} */\nBaseDirective.prototype.MUTATION_CONFIG;\n/** @type {?} */\nBaseDirective.prototype.el;\n/** @type {?} */\nBaseDirective.prototype.renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}