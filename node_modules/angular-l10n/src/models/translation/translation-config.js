export var TranslationConfig = (function () {
    /**
     * @param {?} translation
     */
    function TranslationConfig(translation) {
        this.translation = translation;
    }
    /**
     * Direct loading: adds translation data.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param translation Translation data of the language
     * @param {?} languageCode
     * @param {?} translation
     * @return {?}
     */
    TranslationConfig.prototype.AddTranslation = function (languageCode, translation) {
        this.translation.configuration.translationData[languageCode] = translation;
        return this;
    };
    /**
     * Asynchronous loading: adds a translation provider.
    \@param prefix The path prefix of the json files
    \@param dataFormat Data format: default & supported value is 'json'
     * @param {?} prefix
     * @param {?=} dataFormat
     * @return {?}
     */
    TranslationConfig.prototype.AddProvider = function (prefix, dataFormat) {
        if (dataFormat === void 0) { dataFormat = "json"; }
        this.translation.configuration.providers.push({ path: prefix, dataFormat: "json", webAPI: false });
        return this;
    };
    /**
     * Asynchronous loading: adds a Web API provider.
    \@param path [path]{languageCode} will be the URL used by the Http GET requests
    \@param dataFormat Data format: default & supported value is 'json'
     * @param {?} path
     * @param {?=} dataFormat
     * @return {?}
     */
    TranslationConfig.prototype.AddWebAPIProvider = function (path, dataFormat) {
        if (dataFormat === void 0) { dataFormat = "json"; }
        this.translation.configuration.providers.push({ path: path, dataFormat: dataFormat, webAPI: true });
        return this;
    };
    /**
     * Sets the use of locale (languageCode-countryCode) as language.
     * @return {?}
     */
    TranslationConfig.prototype.UseLocaleAsLanguage = function () {
        this.translation.configuration.localeAsLanguage = true;
        return this;
    };
    /**
     * Sets the value to use for missing keys.
     * @param {?} value
     * @return {?}
     */
    TranslationConfig.prototype.SetMissingValue = function (value) {
        this.translation.configuration.missingValue = value;
        return this;
    };
    /**
     * Sets the key to use for missing keys.
     * @param {?} key
     * @return {?}
     */
    TranslationConfig.prototype.SetMissingKey = function (key) {
        this.translation.configuration.missingKey = key;
        return this;
    };
    /**
     * Sets composed key separator. Default is the point '.'.
     * @param {?} keySeparator
     * @return {?}
     */
    TranslationConfig.prototype.SetComposedKeySeparator = function (keySeparator) {
        this.translation.configuration.keySeparator = keySeparator;
        return this;
    };
    return TranslationConfig;
}());
function TranslationConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    TranslationConfig.prototype.translation;
}
//# sourceMappingURL=translation-config.js.map